#!/usr/bin/env bash

[ ! "$(command -V "fzf")" ] || \
    [ ! "$(command -V "dmenu")" ] && exit 1

[ -z "$NOTEDIR" ] && NOTEDIR="$HOME/Documents/Notes"
[ ! -d "$NOTEDIR" ] && mkdir -p "$NOTEDIR"

TMUX_RUNNING=$(pgrep tmux)

getTime() {
    printf "%s" "$(date +%d-%m-%Y)@$(date +%H:%M)"
}

generateFileName() {
    local title="$1"
    local group="$2"
    local time="$3"

    # replace any whitespaces
    title=$(tr -s ' ' _ <<< "$title")
    group=$(tr -s ' ' _ <<< "$group")

    printf "%s" "note-$group-$title-$time.md"
}

getNvimCmd() {
  local main_header=""
  local sub_header=""
  local note_path=""

  main_header="$1"
  sub_header="$2"
  note_path="$3"

  printf "%s" "nvim \
   -c 'norm Go' \
   -c 'norm Go## $main_header' \
   -c 'norm Go### $sub_header' \
   -c 'norm G2o' \
   -c 'norm zz'  \
   -c 'startinsert' '$note_path'"

}

yesNoPrompt() {
  local prompt="" 
  prompt="$1"

  if [ -n "$2" ];then
      printf "%s" \
          "$(fzf --prompt "$prompt" $FZFTHEME <<< "$(printf "%s\n" "Yes" "No")")"
  else
      printf "%s" \
          "$(dmenu -p "$prompt" -l 2  <<< "$(printf "%s\n" "Yes" "No")")"
  fi

}

inputPrompt() {
  local prompt=""
  local opts=""

  prompt="$1"
  opts="$2"
  
  if [ -n "$3" ];then
      printf "%s" "$(fzf --prompt "$prompt" $FZFTHEME --print-query  <<< "$opts")"
  else
      printf "%s" "$(dmenu -p "$prompt" <<< "$opts" | tr -d '\n')"
  fi
}

createNewNote() {

  # ASK FOR THE NOTE TITLE
  local note_title=""
  note_title="$(inputPrompt "NOTE TITLE: " "" "$1")"

  [ -z "$note_title" ] && exit 0

  # GET EXISTING GROUPS (if any)
  local existing_groups=""
  existing_groups="$(find -L "$NOTEDIR" -maxdepth 1 -mindepth 1 -type d -printf "%f\n")"

  # ASK FOR THE NOTE GROUP
  local note_group=""
  note_group="$(inputPrompt "NOTE GROUP: " "$existing_groups" "$1")"

  [ -z "$note_group" ] &&  note_group="random"

  # SET NOTE PATHS
  local note_file=""
  local note_path=""
  local time=""

  time="$(getTime)"
  note_path="$NOTEDIR/$note_group"
  note_file="$(generateFileName "$note_title" "$note_group" "$time")"

  [ -f "$note_file" ] && exit 0

  local nvim_cmd=""
  nvim_cmd="$(getNvimCmd "$note_title - $note_group" "$time" "$note_path/$note_file")"

  # CONFIRM NOTE CREATION
  if [ "$(yesNoPrompt "Create New Note "$note_file"?, [Yes/No]: " "$1")" == "Yes" ]; then
       # START NOTE CREATION
      [ ! -d "$note_path" ] && mkdir -p "$note_path"

      if [ -n "$TMUX_RUNNING" ]; then 
          tmux neww "$nvim_cmd" 
      else
          $TERMINAL -e "$nvim_cmd"
      fi

  fi
}

openNote() {
    local sel_note=""
    sel_note="$(dm-dir -d "$NOTEDIR" "$1")"

    if [ -f "$sel_note" ]; then
      if [ -n "$TMUX_RUNNING" ]; then 
          tmux neww "nvim $sel_note"
      else
          $TERMINAL -e "nvim $sel_note"
      fi
    fi

}

deleteNote() {
    local sel_note=""
    sel_note="$(dm-dir -d "$NOTEDIR" "$1")"

    if [ -f "$sel_note" ]; then
      [ "$(yesNoPrompt "DELETE NOTE "$sel_note":" "$1")" == "Yes" ] \
          && rm -f "$sel_note" && printf "%s\n" "deleted $sel_note"
    fi
}

clearEmptyGroup() {
    find "$NOTEDIR" -maxdepth 1 -mindepth 1 -type d -empty -delete && \
        printf "%s\n" "cleared empty groups"
}

showHelp() {
    printf "%s\n" \
        "nnote (simple note management script)" \
        "usage: nnote [flag]" \
        "   -new(t), -nw(t)          : create a new note" \
        "   -remove(t), -rm(t)       : remove/delete a note" \
        "   -open(t)                 : open a note" \
        "   -clear-empty-group, -ceg : remove empty groups" \
        "NOTE: 't' suffix determines the prompt (fzf/dmenu)"
}

while [ $# -gt 0 ]; do
    case "$1" in
        -h | -help)
            showHelp
            break
        ;;
        -nw | -new)
            createNewNote
            break
        ;;
        -nwt | -newt)
            createNewNote "-t"
            break
        ;;
        -rm | -remove)
            deleteNote 
            break
        ;;
        -rmt | -removet)
            deleteNote "-t"
            break
        ;;
        -ceg | -clear-empty-group)
            clearEmptyGroup
            break
        ;;
        -open)
            openNote
            break
        ;;
        -opent)
            openNote "-t"
            break
        ;;
        *)
            shift
        ;;
    esac
done

exit 0
