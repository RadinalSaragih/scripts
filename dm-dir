#!/bin/env bash

set -o pipefail

[ ! "$(command -V "fzf")" ] || \
    [ ! "$(command -V "dmenu")" ] && exit 1

STARTING_PATH=""
CURRENT_PATH=""
PROMPT="dmenu -c -bw 2 -p SELECT: -i -g 2 -l 10"
SORT_ENTRIES=0
MAX_FIND_DEPTH=1

while [ $# -gt 0 ]; do
    case "$1" in
        -t | --terminal)
            PROMPT="fzf $FZFTHEME"
            shift
        ;;
        -s | --sorted)
             SORT_ENTRIES=1
             shift
        ;;
        -d | --directory)
             STARTING_PATH="$2"
             shift
             shift
        ;;
        --max-depth)
            MAX_FIND_DEPTH=$2
            shift
            shift
        ;;
        *)
            shift
        ;;
    esac
done

[ -d "$STARTING_PATH" ] && CURRENT_PATH="$STARTING_PATH" || exit 1

PATH_HISTORY=()
PATH_DEPTH=0

# gets the content of CURRENT_PATH
path_content()
{
    # filetype of the thing to find
    local type="$1"

    if [ -n "$type" ]; then
        find -L "$CURRENT_PATH" -maxdepth "$MAX_FIND_DEPTH" -mindepth 1 -type "$type" -printf "%f\n"
    else
        find -L "$CURRENT_PATH" -maxdepth "$MAX_FIND_DEPTH" -mindepth 1 -printf "%f\n"
    fi
}

# reset PATH_HISTORY
reset_path_history()
{
    PATH_DEPTH=0
    PATH_HISTORY=()
}

# add path to PATH_HISTORY
append_to_path_history()
{
    PATH_DEPTH=$((PATH_DEPTH + 1))
    PATH_HISTORY+=("$1")
}

# go back in PATH_HISTORY
go_back_in_path()
{
    [ "$PATH_DEPTH" -gt 0 ] && PATH_DEPTH=$((PATH_DEPTH - 1))
    CURRENT_PATH="${PATH_HISTORY[$PATH_DEPTH]}"
}

# folders go before files
sorted_path_content()
{
    local files=("$(path_content "f")")
    local directories=("$(path_content "d")")

    local dir_content=()

    for dir in "${directories[@]}"; do
        [ -n "$dir" ] && dir_content+=("$dir")
    done

    for file in "${files[@]}"; do
        [ -n "$file" ] && dir_content+=("$file")
    done

    echo "${dir_content[@]}"
}

main()
{
    local directory_content
    local query
    local target_path

    [ -z "$(find $STARTING_PATH -mindepth 1)" ] && exit 1

    while(true); do

        # reset the history if the current path is the starting path
        if [ "$PATH_DEPTH" -eq 0 ] || [ "$CURRENT_PATH" == "$STARTING_PATH" ]; then
            reset_path_history
        fi

        # files or folders in CURRENT_PATH
        directory_content=()

        # get the content of CURRENT_PATH
        if [ "$SORT_ENTRIES" -eq 1 ]; then
            directory_content=("$(sorted_path_content)")
        else
            directory_content=("$(path_content)")
        fi

        # if nothing was found in the CURRENT_PATH go back
        if [ -z "${directory_content[*]}" ]; then
            go_back_in_path
            continue
        fi

        query="$(printf "%s\n" "${directory_content[@]}" | $PROMPT)"

        # exit if nothing was selected, and current path is the starting path
        [ -z "$query" ] && [ "$CURRENT_PATH" == "$STARTING_PATH" ] && break

        # go back if nothing was selected
        if [ -z "$query" ]; then
            go_back_in_path
            continue
        fi

        target_path="$CURRENT_PATH/$query"

        # break the loop if a file was selected, and output the path of the file
        # if a directory is selected, go inside it
        if [ -f "$target_path" ]; then
            printf "%s\n" "$target_path" 2>/dev/null &
            break

        elif [ -d "$target_path" ]; then
            # save the current path
            append_to_path_history "$CURRENT_PATH"

            # append to current path
            CURRENT_PATH="$target_path"

            continue

        else
            notify-send "$target_path"
        fi

    done
}

main
